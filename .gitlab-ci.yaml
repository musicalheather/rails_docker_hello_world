stages:
  - build
  - test
  - deploy

variables:
  POSTGRES_DB: hello_world_database
  POSTGRES_USER: $PGuser
  POSTGRES_PASSWORD: $PGpassword
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHA

services:
  - name: postgres:latest

before_script:
  - bundle install --jobs $(nproc)  # Install Rails dependencies
  - cp config/database.yml.gitlab config/database.yml  # Copy database configuration

build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker build -t rails_hello_world:$DOCKER_IMAGE_TAG .  # Build the Docker image
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Log in to Docker registry
    - docker push $CI_REGISTRY_IMAGE/rails_hello_world:$DOCKER_IMAGE_TAG  # Push the Docker image to registry

test:
  stage: test
  image: ruby:latest
  script:
    - cp config/database.yml.gitlab config/database.yml  # Copy database configuration
    - bundle exec rake db:create db:migrate RAILS_ENV=test  # Set up test database
    - bundle exec rake spec  # Run tests

deploy:
  stage: deploy
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Log in to Docker registry
    - docker pull $CI_REGISTRY_IMAGE/rails_hello_world:$DOCKER_IMAGE_TAG  # Pull the Docker image from registry
    - docker run --name rails_hello_world -d -p 3000:3000 --env-file .env.production $CI_REGISTRY_IMAGE/rails_hello_world:$DOCKER_IMAGE_TAG  # Run the Docker container